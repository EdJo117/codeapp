spk_chr(values = 3:1, elementId = 'spark2')
)
)
install.packages("sparkline")
library(sparkline)
spark_data <- data.frame(
id = c('spark1', 'spark2'),
spark = c(
spk_chr(values = 1:3, elementId = 'spark1'),
spk_chr(values = 3:1, elementId = 'spark2')
)
)
View(spark_data)
tbl <- datatable(spark_data, escape = FALSE)
spk_add_deps(tbl)
library(DT)
tbl <- datatable(spark_data, escape = FALSE)
spk_add_deps(tbl)
spark_data1<- data.frame(id = c('spark1', 'spark2'),
spark = c("1,2,3", "3,2,1"))
ui <- fluidPage(
sparklineOutput("test_spark"),
DT::dataTableOutput("tbl")
)
server <- function(input, output) {
line_string <- "type: 'line', lineColor: 'black', fillColor: '#ccc', highlightLineColor: 'orange', highlightSpotColor: 'orange'"
cd <- list(list(targets = 1, render = JS("function(data, type, full){ return '<span class=sparkSamples>' + data + '</span>' }")))
cb = JS(paste0("function (oSettings, json) {\n  $('.sparkSamples:not(:has(canvas))').sparkline('html', { ",
line_string, " });\n}"), collapse = "")
output$tbl <- DT::renderDataTable({
dt <-  DT::datatable(as.data.frame(spark_data1),  rownames = FALSE, options = list(columnDefs = cd,fnDrawCallback = cb))
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
DT::dataTableOutput("tbl")
)
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sparklineOutput("test_spark"),
DT::dataTableOutput("tbl")
)
shinyApp(ui = ui, server = server)
runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
install.packages("htmlwidgets")
library(htmlwidgets)
runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
length(metadata[,1])
runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
class(length(metadata[,1]))
View(metadata)
df = data.frame(name = NA, id = NA, perimetre = NA)
df[nrow(df)+1,] = c("Produit interieur brut","es.td.b1g_7ch_ind","ES")
df[nrow(df)+1,] = c("Consommation privee","es.td.p3_s145_7ch_ind","ES")
df[nrow(df)+1,] = c("Investissement","es.td.p51g_7ch_ind","ES")
df[nrow(df)+1,] = c("Consommation publique","es.td.p3_s13_7ch_ind","ES")
df[nrow(df)+1,] = c("Exportations","es.td.p6_7ch_ind","ES")
df[nrow(df)+1,] = c("Importations","es.td.p7_7ch_ind","ES")
df[nrow(df)+1,] = c("Demande interieure hors stocks","es.di.contrib","ES")
df[nrow(df)+1,] = c("Variation de stocks","es.stocks.contrib","ES")
df[nrow(df)+1,] = c("Commerce exterieur","es.comext.contrib","ES")
df[nrow(df)+1,] = c("Investissement en construction","es.td.p51g_n11kg_7ch_ind","ES")
df[nrow(df)+1,] = c("Investissement en equipement","es.td.p51g_n11mg_7ch_ind","ES")
df[nrow(df)+1,] = c("RDB","es.td.b6g_s145_3","ES")
df[nrow(df)+1,] = c("Emploi salarie","es.td.emploi_sal_3","ES")
df[nrow(df)+1,] = c("Salaires","es.smpt","ES")
df[nrow(df)+1,] = c("Salaires reels","es.smpt_7ch","ES")
df[nrow(df)+1,] = c("Taux d'activite","es.tx_act","ES")
df[nrow(df)+1,] = c("Population active","es.td.pop_act_3","ES")
df[nrow(df)+1,] = c("Emploi total","es.td.emploi_3","ES")
df[nrow(df)+1,] = c("Taux de chomage","es.td.tx_chomage_pe","ES")
df[nrow(df)+1,] = c("Inflation energetique","es.td.ipch_nrj","ES")
df[nrow(df)+1,] = c("Inflation alimentaire","es.td.ipch_alim","ES")
df[nrow(df)+1,] = c("Inflation sous-jacente","es.td.ipch_sj","ES")
df[nrow(df)+1,] = c("Inflation totale","es.td.ipch_tot","ES")
df[nrow(df)+1,] = c("Deflateur de la consommation","es.td.p3_s145_9","ES")
df[nrow(df)+1,] = c("Taux d'epargne","es.tx_ep","ES")
df[nrow(df)+1,] = c("Pouvoir d'achat","es.td.b6g_s145_7","ES")
df[nrow(df)+1,] = c("Produit interieur brut","al.pib","AL")
df[nrow(df)+1,] = c("Consommation privee","al.conso","AL")
df[nrow(df)+1,] = c("Investissement","al.fbcf","AL")
df[nrow(df)+1,] = c("Consommation publique","al.consopub","AL")
df[nrow(df)+1,] = c("Exportations","al.export","AL")
df[nrow(df)+1,] = c("Importations","al.import","AL")
df[nrow(df)+1,] = c("Demande interieure hors stocks","al.di.contrib","AL")
df[nrow(df)+1,] = c("Variation de stocks","al.stocks.contrib","AL")
df[nrow(df)+1,] = c("Commerce exterieur","al.comext.contrib","AL")
df[nrow(df)+1,] = c("Investissement en construction","al.fbcfcons","AL")
df[nrow(df)+1,] = c("Investissement en equipement","al.fbcfeq","AL")
df[nrow(df)+1,] = c("Investissement autre","al.fbcfautre","AL")
df[nrow(df)+1,] = c("RDB","al.rdb_insee","AL")
df[nrow(df)+1,] = c("Emploi salarie","al.emploi_sal","AL")
df[nrow(df)+1,] = c("Salaires","al.smpt","AL")
df[nrow(df)+1,] = c("Taux d'activite","al.taux_activite","AL")
df[nrow(df)+1,] = c("Population active","al.popact","AL")
df[nrow(df)+1,] = c("Emploi total","al.emploi_total","AL")
df[nrow(df)+1,] = c("Taux de chomage","al.tx_u_cnt","AL")
df[nrow(df)+1,] = c("Inflation energetique","al.ipch_energie_t","AL")
df[nrow(df)+1,] = c("Inflation alimentaire","al.ipch_alim_t","AL")
df[nrow(df)+1,] = c("Inflation sous-jacente","al.ipch_sj_t","AL")
df[nrow(df)+1,] = c("Inflation totale","al.ipch_t","AL")
df[nrow(df)+1,] = c("Deflateur de la consommation","al.def_conso","AL")
df[nrow(df)+1,] = c("Pouvoir d'achat","al.pvr_achat","AL")
df[nrow(df)+1,] = c("Taux d'epargne","al.tx_s_maison_b","AL")
metadata = df
View(metadata)
dataEXP <- loaddata("ES")
dataEXP2 <- dataEXP %>%
distinct() %>%
pivot_wider(., names_from = time, values_from = value)
View(dataEXP2)
length(dataEXP2[,1])
dataEXP2[,1]
length(as.data.frame(dataEXP2[,1]))
nrow(dataEXP2)
runApp('AppTest.R')
runApp('C:/Users/edgar/Desktop/TestShiny.R')
runApp('AppTest.R')
runApp('C:/Users/edgar/Desktop/TestShiny.R')
library(shiny); runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
library(shiny); runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
library(shiny); runApp('AppTest.R')
library(shiny); runApp('AppTest.R')
library(shiny); runApp('AppTest.R')
signif(0.123456, digits = 3)
signif(0.123456, digits = 1)
signif(0.123456, digits = 7)
signif(0.123456, digits = 4)
signif(0.12499, digits = 4)
runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
library(shiny); runApp('AppTest.R')
library(shiny); runApp('AppTest.R')
runApp('AppTest.R')
file.info(paste0(linkf("AL"),"/","AL2020-01-24_15h39.Rdata"))$mtime
dtest1 = loaddata("AL",today())
dtest2 = loaddata("AL",file.info(paste0(linkf("AL"),"/","AL2020-01-24_15h39.Rdata"))$mtime)
View(dtest1)
View(dtest2)
metar = metadata %>%
select(name,Tableau) %>%
distinct()
dtest1 = dtest1 %>%
left_join(metar)
dtest2 = dtest2 %>%
left_join(metar)
dtest1 = dtest1 %>%
filter(Tableau == 1) %>%
distinct() %>%
pivot_wider(., names_from = time, values_from = value)
dtest2 = dtest2 %>%
filter(Tableau == 1) %>%
distinct() %>%
pivot_wider(., names_from = time, values_from = value)
View(dtest1)
View(dtest2)
dtestf = comparedata(dtest1,dtest2)
comparedata <- function(dt1,dt2) {
x = nrow(dt1)
y = ncol(dt1)
dt3 = dt1
for (i in c(1:x)) {
for (j in c(1:y)) {
if (is.na(dt1[i,j]) && is.na(dt2[i,j])) {dt3[i,j] = NA}
else if (is.na(dt1[i,j])) {dt3[i,j] = dt2[i,j]}
else if (is.na(dt2[i,j])) {dt3[i,j] = dt1[i,j]}
else if (dt1[i,j] != dt2[i,j]) {
# dt3[i,j] = paste(dt1[i,j] ," || ", dt2[i,j])
dt3[i,j] = 0
}
}
}
return(dt3)}
dtestf = comparedata(dtest1,dtest2)
View(dtestf)
as.character(dtest1)
class(as.character(dtest1))
class(as.dataframe(as.character(dtest1)))
class(as.dataFrame(as.character(dtest1)))
class(as.Dataframe(as.character(dtest1)))
class(as.data.frame(as.character(dtest1)))
aas = as.data.frame(as.character(dtest1))
View(aas)
dftestst = data.frame(c(NA)*3)
View(dftestst)
c(NA)*3
c(1)*3
dftestst = data.frame(vector(NA,3))
dftestst = data.frame(vector("NA",3))
dftestst = data.frame(vector("list",3))
View(dftestst)
dftestst = as.data.frame(vector("list",3))
c(NA) + c(NA) + c(NA)
ltestst <- append(c(NA), c(NA))
ltestst <- append(ltestst, c(NA))
dftestst = data.frame(ltestst)
View(dftestst)
dftestst[,length(dftestst[1,])+1] =  ltestst
View(dftestst)
comparedata <- function(dt1,dt2) {
x = nrow(dt1)
y = ncol(dt1)
dt3 = dt1
ltest <- c(NA)
for (i in c(1:(x-1)))
{ltest <- append(ltest, c(NA))}
dt3 = data.frame(ltest)
for (j in c(1:(y-1)))
{dt3[,length(dt3[1,])+1] = ltest}
for (i in c(1:x)) {
for (j in c(1:y)) {
if (is.na(dt1[i,j]) && is.na(dt2[i,j])) {dt3[i,j] = NA}
else if (is.na(dt1[i,j])) {dt3[i,j] = dt2[i,j]}
else if (is.na(dt2[i,j])) {dt3[i,j] = dt1[i,j]}
else if (dt1[i,j] != dt2[i,j]) {
dt3[i,j] = paste(dt1[i,j] ," || ", dt2[i,j])
else {dt3[i,j] = dt1[i,j]
}
}
}
}
return(dt3)}
comparedata <- function(dt1,dt2) {
x = nrow(dt1)
y = ncol(dt1)
dt3 = dt1
ltest <- c(NA)
for (i in c(1:(x-1)))
{ltest <- append(ltest, c(NA))}
dt3 = data.frame(ltest)
for (j in c(1:(y-1)))
{dt3[,length(dt3[1,])+1] = ltest}
for (i in c(1:x)) {
for (j in c(1:y)) {
if (is.na(dt1[i,j]) && is.na(dt2[i,j])) {dt3[i,j] = NA}
else if (is.na(dt1[i,j])) {dt3[i,j] = dt2[i,j]}
else if (is.na(dt2[i,j])) {dt3[i,j] = dt1[i,j]}
else if (dt1[i,j] != dt2[i,j]) {
dt3[i,j] = paste(dt1[i,j] ," || ", dt2[i,j])
}
else {dt3[i,j] = dt1[i,j]
}
}
}
return(dt3)}
dtestf = comparedata(dtest1,dtest2)
View(dtestf)
comparedata <- function(dt1,dt2) {
x = nrow(dt1)
y = ncol(dt1)
dt3 = dt1
ltest <- c(NA)
for (i in c(1:(x-1)))
{ltest <- append(ltest, c(NA))}
dt3 = data.frame(ltest)
for (j in c(1:(y-1)))
{dt3[,length(dt3[1,])+1] = ltest}
colnames(dt3) = colnames(dt1)
for (i in c(1:x)) {
for (j in c(1:y)) {
if (is.na(dt1[i,j]) && is.na(dt2[i,j])) {dt3[i,j] = NA}
else if (is.na(dt1[i,j])) {dt3[i,j] = dt2[i,j]}
else if (is.na(dt2[i,j])) {dt3[i,j] = dt1[i,j]}
else if (dt1[i,j] != dt2[i,j]) {
dt3[i,j] = paste(dt1[i,j] ," || ", dt2[i,j])
}
else {dt3[i,j] = dt1[i,j]
}
}
}
return(dt3)}
dtestf = comparedata(dtest1,dtest2)
runApp('AppTest.R')
dtest2 = loaddata("AL",file.info(paste0(linkf("AL"),"/","AL2019-04-25_09h24.Rdata"))$mtime)
dtest2 = dtest2 %>%
left_join(metar)
dtest2 = dtest2 %>%
filter(Tableau == 1) %>%
distinct() %>%
pivot_wider(., names_from = time, values_from = value)
dtest[,5:7]
dtest1[,5:7]
class(dtest1[,5:7])
data.frame(dtest1[,5:7],dtest1[,1:3])
comparedata <- function(dt1,dt2) {
x = nrow(dt1)
y = ncol(dt1)
ltest <- c(NA)
for (i in c(1:(x-1)))
{ltest <- append(ltest, c(NA))}
dt3 = data.frame(ltest)
for (j in c(1:(y-1)))
{dt3[,length(dt3[1,])+1] = ltest}
colnames(dt3) = colnames(dt1)
for (i in c(1:x)) {
for (j in c(1:y)) {
if (is.na(dt1[i,j]) && is.na(dt2[i,j])) {dt3[i,j] = NA}
else if (is.na(dt1[i,j])) {dt3[i,j] = dt2[i,j]}
else if (is.na(dt2[i,j])) {dt3[i,j] = dt1[i,j]}
else if (dt1[i,j] != dt2[i,j]) {
dt3[i,j] = paste(dt1[i,j] ," || ", dt2[i,j])
}
else {dt3[i,j] = dt1[i,j]
}
}
}
return(dt3)}
comparedataf <- function(dt1,dt2) {
y1 = ncol(dt1)
y2 = ncol(dt2)
if (y1 > y2) {dtf = data.frame(comparedata(dt1[,1:y2],dt2),dt1[y2+1,y1])}
else if (y2 > y1) {dtf = data.frame(comparedata(dt1,dt2[,1:y1]),dt2[y1+1,y2])}
else {dtf = comparedata(dt1,dt2)}
return(dtf)}
dtestf = comparedataf(dtest1,dtest2)
View(dtestf)
comparedataf <- function(dt1,dt2) {
y1 = ncol(dt1)
y2 = ncol(dt2)
if (y1 > y2) {dtf = data.frame(comparedata(dt1[,1:y2],dt2),dt1[,y2+1:y1])}
else if (y2 > y1) {dtf = data.frame(comparedata(dt1,dt2[,1:y1]),dt2[,y1+1:y2])}
else {dtf = comparedata(dt1,dt2)}
return(dtf)}
dtestf = comparedataf(dtest1,dtest2)
comparedataf <- function(dt1,dt2) {
y1 = ncol(dt1)
y2 = ncol(dt2)
if (y1 > y2) {dtf = data.frame(comparedata(dt1[,1:y2],dt2),dt1[,(y2+1):y1])}
else if (y2 > y1) {dtf = data.frame(comparedata(dt1,dt2[,1:y1]),dt2[,(y1+1):y2])}
else {dtf = comparedata(dt1,dt2)}
return(dtf)}
dtestf = comparedataf(dtest1,dtest2)
View(dtestf)
comparedataf <- function(dt1,dt2) {
y1 = ncol(dt1)
y2 = ncol(dt2)
if (y1 > y2) {dtf = data.frame(comparedata(dt2,dt1[,1:y2]),dt1[,(y2+1):y1])}
else if (y2 > y1) {dtf = data.frame(comparedata(dt1,dt2[,1:y1]),dt2[,(y1+1):y2])}
else {dtf = comparedata(dt1,dt2)}
return(dtf)}
dtestf = comparedataf(dtest1,dtest2)
runApp('AppTest.R')
runApp('AppTest.R')
colnames(dtestf)
colnames(dtestf)[3:12]
as.Date(colnames(dtestf)[3:12])
as.Date("X2018.07.01")
dtest1[,1:5]
colnames(dtest1[,1:5])
as.Date("2018-07-01")
cbind(dtest1[,1:4],dtest1[,5:7])
comparedataf <- function(dt1,dt2) {
y1 = ncol(dt1)
y2 = ncol(dt2)
if (y1 > y2) {dtf = cbind(comparedata(dt2,dt1[,1:y2]),dt1[,(y2+1):y1])}
else if (y2 > y1) {dtf = cbind(comparedata(dt1,dt2[,1:y1]),dt2[,(y1+1):y2])}
else {dtf = comparedata(dt1,dt2)}
return(dtf)}
dtestf = comparedataf(dtest1,dtest2)
runApp('AppTest.R')
fcomp("ES")
runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
file.info(paste0(linkf("AL"),"/",""))$mtime
runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
runApp('AppTest.R')
fcomp("AL")
runApp('AppTest.R')
install.packages("N:/G140/M-G140/Usuels.dsc/pRev/Packages/pRev_1.0.6.78.zip",
repos = NULL, type = "win.binary")
install.packages("C:/Users/edgar/Downloads/pRev_1.0.6.78.zip",
repos = NULL, type = "win.binary")
library(pRev)
install.packages("x12")
library(pRev)
install.packages("reshape")
library(pRev)
install.packages("rwebstat")
library(pRev)
library(rwebstat)
library(tidyverse)
webstat_client_ID <- 'd85fb7da-a306-469f-9b60-2e35d251611b'
list_series_FM = w_series_list("FM")
tmo = rwebstat::w_data(dataset_name = "FM", series_name = "M.FR.EUR.FR2.MM.TMO.HSTA")
tmo = tmo[,2]
tmo = ts(tmo, start = c(2004, 10), freq = 12)
tmo_fc <- na.approx(tmo)
fr_gov10y = rwebstat::w_data(dataset_name = "FM",
series_name = "FM.M.FR.EUR.FR2.BB.FR10YT_RR.YLD")
fr_gov10y = fr_gov10y %>%
filter(date >= as.Date("2004-10-01")) %>%
pull(2)
fr_gov10y_fc = ts(fr_gov10y, start = c(2004, 10), freq = 12)
finprevm = c(2020, 4)
dum1106 <- dummy(fr_gov10y_fc, deb = c(2011, 6), fin = finprevm) # rupture de serie
fit_tmo <- estim(d.tmo_fc ~
L(tmo_fc)
+ L(fr_gov10y_fc)
+ L(d.tmo_fc,1)
+ dum1106,
start_graph = "2015-01-01",
title = "TMO - Taux du marché primaire des émissions à plus de 7 ans - France"
)
library(pRev)
library(rwebstat)
library(tidyverse)
webstat_client_ID <- 'd85fb7da-a306-469f-9b60-2e35d251611b'
list_series_FM = w_series_list("FM")
tmo = rwebstat::w_data(dataset_name = "FM", series_name = "M.FR.EUR.FR2.MM.TMO.HSTA")
tmo = tmo[,2]
tmo = ts(tmo, start = c(2004, 10), freq = 12)
tmo_fc <- na.approx(tmo)
fr_gov10y = rwebstat::w_data(dataset_name = "FM",
series_name = "FM.M.FR.EUR.FR2.BB.FR10YT_RR.YLD")
fr_gov10y = fr_gov10y %>%
filter(date >= as.Date("2004-10-01")) %>%
pull(2)
fr_gov10y_fc = ts(fr_gov10y, start = c(2004, 10), freq = 12)
finprevm = c(2020, 4)
dum1106 <- dummy(fr_gov10y_fc, deb = c(2011, 6), fin = finprevm) # rupture de serie
fit_tmo <- estim(d.tmo_fc ~
L(tmo_fc)
+ L(fr_gov10y_fc)
+ L(d.tmo_fc,1)
+ dum1106,
start_graph = "2015-01-01",
title = "TMO - Taux du marché primaire des émissions à plus de 7 ans - France"
)
install.packages("car")
library(pRev)
webstat_client_ID <- 'd85fb7da-a306-469f-9b60-2e35d251611b'
list_series_FM = w_series_list("FM")
tmo = rwebstat::w_data(dataset_name = "FM", series_name = "M.FR.EUR.FR2.MM.TMO.HSTA")
tmo = tmo[,2]
tmo = ts(tmo, start = c(2004, 10), freq = 12)
tmo_fc <- na.approx(tmo)
fr_gov10y = rwebstat::w_data(dataset_name = "FM",
series_name = "FM.M.FR.EUR.FR2.BB.FR10YT_RR.YLD")
fr_gov10y = fr_gov10y %>%
filter(date >= as.Date("2004-10-01")) %>%
pull(2)
fr_gov10y_fc = ts(fr_gov10y, start = c(2004, 10), freq = 12)
finprevm = c(2020, 4)
dum1106 <- dummy(fr_gov10y_fc, deb = c(2011, 6), fin = finprevm) # rupture de serie
fit_tmo <- estim(d.tmo_fc ~
L(tmo_fc)
+ L(fr_gov10y_fc)
+ L(d.tmo_fc,1)
+ dum1106,
start_graph = "2015-01-01",
title = "TMO - Taux du marché primaire des émissions à plus de 7 ans - France"
)
tmo = rwebstat::w_data(dataset_name = "FM", series_name = "M.FR.EUR.FR2.MM.TMO.HSTA")
tmo_metadata = w_meta(tmo)
tmo_metadata
tmo = tmo[,2]
tmo = ts(tmo, start = c(2004, 10), freq = 12)
tmo_fc <- na.approx(tmo)
tmo_fc
fr_gov10y = rwebstat::w_data(dataset_name = "FM",
series_name = "FM.M.FR.EUR.FR2.BB.FR10YT_RR.YLD")
fr_gov10y = fr_gov10y %>%
filter(date >= as.Date("2004-10-01")) %>%
pull(2)
fr_gov10y_fc = ts(fr_gov10y, start = c(2004, 10), freq = 12)
finprevm = c(2020, 4)
dum1106 <- dummy(fr_gov10y_fc, deb = c(2011, 6), fin = finprevm) # rupture de serie
dum1106
fit_tmo <- estim(d.tmo_fc ~
L(tmo_fc)
+ L(fr_gov10y_fc)
+ L(d.tmo_fc)
+ dum1106,
start_graph = "2015-01-01",
title = "TMO - Taux du marché primaire des émissions à plus de 7 ans - France"
)
install.packages("facts")
